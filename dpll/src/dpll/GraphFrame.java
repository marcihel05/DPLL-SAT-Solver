/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package dpll;

import java.awt.Component;
import java.io.File;
import static java.lang.Math.abs;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import javax.swing.JFileChooser;

/**
 *
 * @author helena
 */
public class GraphFrame extends javax.swing.JFrame {
    
    private DpllGui gui;
    private GraphColoring g;
    private Dpll dpllAlg;
    private String fileName ="";
    private JFileChooser jChooser1 = new JFileChooser();
    private Formula formula;
    private DrawGraph drawing;
    

    /**
     * Creates new form GraphFrame
     */
    public GraphFrame() {
        initComponents();
        jChooser1.setCurrentDirectory(new java.io.File("."));
        rezLabel.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        colorSpinner = new javax.swing.JSpinner();
        loadButton = new javax.swing.JButton();
        checkButton = new javax.swing.JButton();
        rezLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        randButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        nodesSpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 0, 20)); // NOI18N
        jLabel1.setText("Graph Coloring");

        jLabel2.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        jLabel2.setText("Number of colors");

        colorSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        loadButton.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        loadButton.setText("<html>Load graph<br>     from file</html>");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        checkButton.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        checkButton.setText("<html>  Try to  <br>color it!</html>");
        checkButton.setEnabled(false);
        checkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkButtonActionPerformed(evt);
            }
        });

        rezLabel.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        rezLabel.setText("jLabel3");

        jLabel3.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        jLabel3.setText("or");

        randButton.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        randButton.setText("<html>     Generate<br>random graph</html>");
        randButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        jLabel4.setText("with");

        nodesSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        jLabel5.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        jLabel5.setText("vertices");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(colorSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(101, 101, 101)
                                .addComponent(checkButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1)
                            .addComponent(rezLabel))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(randButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addGap(13, 13, 13)
                        .addComponent(nodesSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(17, 17, 17))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(randButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)
                                    .addComponent(nodesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addGap(15, 15, 15)))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(colorSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)))
                .addComponent(rezLabel)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("Stisnuti gumb");
        ArrayList<ArrayList<Integer>> matrix = new ArrayList<>();
        int retVal = jChooser1.showOpenDialog((Component)evt.getSource());
        if( retVal == JFileChooser.APPROVE_OPTION){
            File file = jChooser1.getSelectedFile();
            System.out.println("otvaram file");
            try{
                fileName = file.toString();
            }
            
            catch(Exception e){}
            File formulaFile = new File(fileName);
            try{
                Scanner reader = new Scanner(formulaFile);
                while(reader.hasNextLine() ){
                    System.out.println("citam file");
                    String line = reader.nextLine(); 
                    ArrayList<Integer> red = new ArrayList<>();
                    var lineSplit = line.split(" ");
                    for(int i = 0; i < lineSplit.length; ++i){
                        red.add(Integer.parseInt(lineSplit[i]));
                    }
                    matrix.add(red);
                }
                System.out.println("ucitani graf");
                for(var red:matrix){
                    for(var e : red){
                        System.out.print(e+" ");
                    }
                    System.out.print("\n");
                }
                
            }
            catch(Exception e){System.out.println(e);}
             checkButton.setEnabled(true);
             g = new GraphColoring(matrix);
             System.out.println("stvaram graph");
             drawing = new DrawGraph(g);
             drawing.draw();
            
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void checkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkButtonActionPerformed
        // TODO add your handling code here:
        int c = (int)colorSpinner.getValue();
        g.setNumOfColors(c);
        formula = g.generateFormula();
        System.out.println("stvaram formulu");
        gui.setFormula(formula);
        //gui.setFormulaText(formula.toString());
        gui.setPropLabel(formula.numOfProp()+"");
        gui.setClausesLabel(formula.size() + "");
        dpllAlg = new Dpll(formula);
        Pair rez = dpllAlg.start();
        if(rez.getDecision()){
            gui.setIntText("Formula is\nsatisfiable!\n" + rez.getInterpretation().toString());
            rezLabel.setText("Coloring successful!");
            HashMap<Integer,Integer> coloringBook = colorByNumbers(rez.getInterpretation());
            drawing.color(c, coloringBook);
        }
        else {
            gui.setIntText("Formula is\nunsatisfiable!");
            rezLabel.setText("Coloring not possible!");
        }
    }//GEN-LAST:event_checkButtonActionPerformed

    private void randButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randButtonActionPerformed
        // TODO add your handling code here:
        GraphColoring randomizer = new GraphColoring();
        g = randomizer.randomGraphGenerator((int)nodesSpinner.getValue());
        checkButton.setEnabled(true);
        System.out.println("stvaram graph");
        drawing = new DrawGraph(g);
        drawing.draw();
    }//GEN-LAST:event_randButtonActionPerformed

    private HashMap<Integer,Integer> colorByNumbers(Interpretation i){
        HashMap<Integer,Integer> coloringBook = new HashMap<>(); //vrh->boja
        Map<Integer, Boolean> interp = i.getInterp();
        for(var p : interp.entrySet()){
            int prop = p.getKey();
            StringBuilder vertexBuilder = new StringBuilder();
            String propVar = Integer.toString(prop);
            for( int j = 0; j < propVar.length()-1; ++j){
                vertexBuilder.append(propVar.charAt(j));
            }
            int vertex = Integer.parseInt(vertexBuilder.toString());
            int col = Integer.parseInt(propVar.charAt(propVar.length()-1)+"");
            boolean a = p.getValue();
            if(a == true){
                System.out.println("vrh je " + vertex + ", a boja je " + col);
                coloringBook.put(vertex,col);
            }
            
        }
        return coloringBook;
    }
    
    public void setGUI(DpllGui _gui){
        gui = _gui;
    }
    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkButton;
    private javax.swing.JSpinner colorSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton loadButton;
    private javax.swing.JSpinner nodesSpinner;
    private javax.swing.JButton randButton;
    private javax.swing.JLabel rezLabel;
    // End of variables declaration//GEN-END:variables
}
